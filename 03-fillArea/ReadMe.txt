# -*- coding: utf-8 -*-
<<< 目次 >>>
  1. 概要
  2. プログラムの仕様
  3. プログラムのビルドについて


################################################################################
# 1. 概要                                                                      #
################################################################################
このプログラムは画像のエッジを検出するためのものある．t-Roomのキャプチャ画像から
エッジを検出し，頭部領域を切り出しやすくするために用いるとよい．


################################################################################
# 2. プログラムの仕様                                                          #
################################################################################
このプログラムは以下のように用いる．
  $ ./fillArea IMAGE-FILE [option ... ]

オプションは以下のものがある．
  -d DIRECTION, --direction=DIRECTION
    引数: 走査方向(デフォルト値: x)
    画像を塗り潰す際に走査する方向を指定する．
    指定可能な走査方向は以下の2種類．
      1) x
        左から右に向かって画像を走査する．
      2) y
        上から下に向かって画像を走査する．
  -f COLOR, --foreground=COLOR
    引数: 前景色(デフォルト値: 0x000000)
    画像を塗り潰す際に領域境界とする色，塗り潰しに用いる色を指定する．
    色は16進数RGB値(0xRRGGBBの形式)を指定する．
  -h, --help
    引数: 無し
    プログラムの使い方を表示し，プログラムを終了する．
  -o FILENAME, --output=FILENAME
    引数: 出力ファイル名(デフォルト値: 入力ファイル名に"-filled"を加えたもの)
    塗り潰し結果の画像ファイル名を指定する．
  -s SIZE_STRING, --size=SIZE_STRING
    引数: 画像サイズ(デフォルト値: auto)
    ウィンドウに表示する塗り潰し結果の画像のサイズを指定する．
    大きすぎて，ディスプレイに画像を表示しきれないときの挙動を決定できる．
    取り得る値のフォーマットは以下の4パターンである．
      1) [数値]x[数値]
        640x320のように，縦と横の画像サイズを指定する．
      2) [数値]%
        50%のように，リザイズ後の画像の大きさをパーセントで指定する．
        画像の縦横比は維持される．
      3) original
        画像を元の大きさのまま表示する．
      4) auto
        ディスプレイの解像度から自動的に判断して，大きさを決定する．
        画像サイズは大きくても，ディスプレイの横方向の解像度の半分か，縦方向の
        解像度の半分になる(縦横比は維持される)．
        この機能はWindowsでのみ有効であり，それ以外のOSでは画像のリサイズは
        行われない．
  -t (BLANK_SPACE), --trim(=BLANK_SPACE)
    引数: 無し or 余白(px)
    塗り潰し結果の画像の領域部分のみを出力するかどうかを決定する．
    引数無しでオプションが指定されたとき，余白無しで領域部分が納まる長方形で
    画像を切り出す．
    引数で何ピクセル分の余白を含めるかを指定すると，その余白分，切り出し長方形を
    上下左右に拡大する．
  --nosave
    引数: 無し
    結合した結果の画像を出力しない．
  --noshow
    引数: 無し
    結合した結果の画像をウィンドウに表示しない．


################################################################################
# 3. プログラムのビルドについて                                                #
################################################################################
1) MinGWのg++を用いてビルドする場合
このディレクトリのMakefileを用いるとよい．
  $ make
とすれば，プログラムをビルドすることができる．
なお，
  $ make clean
とすれば，生成したオブジェクトファイルと実行ファイルを削除できる．
また，
  $ make ctags
とすれば，このプログラムのtagsファイルを生成する(要: ctags)．
なお，g++のバージョンは4.6以上である必要がある．

2) MSVCのcl.exeでビルドする場合
このディレクトリのMakefileを用いるとよい．
  > nmake /f msvc.mk
とすれば．4つ全てのプログラムをビルドすることができる．
なお，
  $ nmake /f msvc.mk clean
とすれば，生成したオブジェクトファイルと実行ファイルを削除できる．
また，
  $ nmake /f msvc.mk ctags
とすれば，このプログラムのtagsファイルを生成する(要: ctags)．
なお，MSVC 2010以上のバージョンである必要がある．
